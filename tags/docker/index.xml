<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on mazgi.log</title>
    <link>https://mazgi.github.io/tags/docker/</link>
    <description>Recent content in docker on mazgi.log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 May 2020 03:48:13 +0000</lastBuildDate>
    
	<atom:link href="https://mazgi.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ProvisioningをDocker Composeで完結させる</title>
      <link>https://mazgi.github.io/posts/2020.05/dockerized-provisioning-project/</link>
      <pubDate>Thu, 07 May 2020 03:48:13 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2020.05/dockerized-provisioning-project/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mazgi.github.io/posts/2020.01/dockerized-typescript-nextjs-project/&#34;&gt;Web Frontend 開発環境を Docker 化する記事&lt;/a&gt;や&lt;a href=&#34;https://mazgi.github.io/posts/2020.01/dockerized-typescript-webapi-project/&#34;&gt;BFF(Web API)開発環境を Docker 化する記事&lt;/a&gt;に続いて「IaaS の Provisioning を Docker 化する」方法を考えてみました。&lt;/p&gt;

&lt;p&gt;PoC を目的としたプロジェクトなどで Web アプリケーション開発の初期のシステム設計だけサクッと手伝う場合などがあり、そのような場合は例えば IaaS 上のシステム設計と Provisioning くらいまでを考えて再現性を担保した上で共有できると後々プロジェクトとシステムの運用が省力化できます。&lt;/p&gt;

&lt;p&gt;ただ、IaaS 上でシステムを維持するためには各 IaaS の CLI や Terraform など、普段 Web アプリケーション開発を専門にしている方にはなじみが薄いツールが登場します。&lt;br /&gt;
これらのツールの導入手順を書くだけでも README が長くなってしまいますし、毎回同じような内容になりがちな手順は書く場合も読む場合も負担です。&lt;/p&gt;

&lt;p&gt;そこでそれらの IaaS 関連ツールや設定作業をコード化し隠蔽し「プロジェクトメンバー全員が IaaS 構成を 1 日程度のハンズオンで扱えるようになる」方法を考えてみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web Frontend を Next.js &#43; TypeScript で書いて Docker でビルドする</title>
      <link>https://mazgi.github.io/posts/2020.01/dockerized-typescript-nextjs-project/</link>
      <pubDate>Wed, 22 Jan 2020 12:22:49 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2020.01/dockerized-typescript-nextjs-project/</guid>
      <description>&lt;p&gt;「手っ取り早く Web インターフェースを手に入れる方法 2020」シリーズ(?)の&lt;a href=&#34;https://mazgi.github.io/posts/2020.01/dockerized-typescript-webapi-project/&#34;&gt;BFF サンプルプロジェクト&lt;/a&gt; と同じように Web Frontend サンプルプロジェクトを作ってみました。&lt;/p&gt;

&lt;p&gt;今回もプロジェクト構成やビルド方法の検証が主目的です。&lt;br /&gt;
そのためアプリケーション自体は Docker イメージを実行すると&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;の Web サーバーが起動しこんなページが表示されるだけのシンプルな機能しかありません。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shellsession&#34; data-lang=&#34;shellsession&#34;&gt;❯ docker run -it --rm -p 3000:3000 b2ee27d0d01d

&amp;gt; @ start /app
&amp;gt; next start

&amp;gt; Ready on http://localhost:3000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Web APIをTypeScriptで書いてDockerでビルドする</title>
      <link>https://mazgi.github.io/posts/2020.01/dockerized-typescript-webapi-project/</link>
      <pubDate>Thu, 16 Jan 2020 00:10:30 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2020.01/dockerized-typescript-webapi-project/</guid>
      <description>&lt;p&gt;「手っ取り早く Web インターフェースを手に入れる方法 2020」みたいなことを考えながら勉強のために BFF(Backend For Frontend) のサンプルプロジェクトを作ってみました。&lt;br /&gt;
ただしプロジェクト構成やビルド方法の検証が主なので BFF に特化した機能はなく、実行すると Express が起動してコンソールログが表示されるだけのアプリケーションです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shellsession&#34; data-lang=&#34;shellsession&#34;&gt;❯ docker run -it --rm 19472c5d8df4
💽 Loaded the configuration: version: 2020.1.0-default, baseVersion: 2020.1.0-default
⚡ App is running at :4000 in production mode
  Press CTRL-C to stop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>なぜそのプロジェクトでKubernetesが選択されたか</title>
      <link>https://mazgi.github.io/posts/2019.12/why-choose-k8s-for-the-project/</link>
      <pubDate>Wed, 18 Dec 2019 23:35:25 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2019.12/why-choose-k8s-for-the-project/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;https://mazgi.github.io/posts/2019.12/went-to-gcpug-tokyo-dec-2019/&#34;&gt;「GCPUG Tokyo December 2019」の記事&lt;/a&gt;から「Why Kubernetes? Why not GAE or others?」部分を切り出した記事です。&lt;br /&gt;
本記事のコンテキストとして、イベントでお話しさせていただいた資料「&lt;a href=&#34;https://speakerdeck.com/mazgi/fast-development-for-ml-web-service-on-gke-and-gcp&#34;&gt;ML アプリケーション短期開発 / Fast development for ML Web Service on GKE &amp;amp; GCP&lt;/a&gt;」」を事前にご参照いただけると幸いです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「GCPUG Tokyo December 2019」でお話させていただきました</title>
      <link>https://mazgi.github.io/posts/2019.12/went-to-gcpug-tokyo-dec-2019/</link>
      <pubDate>Wed, 18 Dec 2019 22:35:25 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2019.12/went-to-gcpug-tokyo-dec-2019/</guid>
      <description>&lt;p&gt;昨日 &lt;sup&gt;12&lt;/sup&gt;&amp;frasl;&lt;sub&gt;18&lt;/sub&gt; に開催された「&lt;a href=&#34;https://gcpug-tokyo.connpass.com/event/152607/&#34;&gt;GCPUG Tokyo December 2019&lt;/a&gt;」で「&lt;a href=&#34;https://speakerdeck.com/mazgi/fast-development-for-ml-web-service-on-gke-and-gcp&#34;&gt;ML アプリケーション短期開発 / Fast development for ML Web Service on GKE &amp;amp; GCP&lt;/a&gt;」と題してお話しさせていただきました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3330c952865c46068644f1bc24042b2d&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>新しいGitHub ActionsとGitHub Package RegistryでCI/CD(サンプルあり)</title>
      <link>https://mazgi.github.io/posts/2019.08/use-github-actions-cicd-with-github-package-registry/</link>
      <pubDate>Sun, 18 Aug 2019 07:23:57 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2019.08/use-github-actions-cicd-with-github-package-registry/</guid>
      <description>ありがたいことにGitHub Actions(beta)とGitHub Package Registry(beta)両方が使えるようになったので試してみました</description>
    </item>
    
    <item>
      <title>Publish Docker Image to GitHub Package Registry</title>
      <link>https://mazgi.github.io/posts/2019.06/publish-docker-image-to-github-package-registry/</link>
      <pubDate>Sat, 29 Jun 2019 04:00:09 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2019.06/publish-docker-image-to-github-package-registry/</guid>
      <description>5月に発表されたGitHub Package Registryのlimited public betaが通ったのでひとまずDockerイメージをpushしてみた。 How to Use D</description>
    </item>
    
    <item>
      <title>AI時代のDocker &#43; XaaS簡単理解</title>
      <link>https://mazgi.github.io/posts/2019.05/brief-description-of-xaas-in-the-ai-era/</link>
      <pubDate>Mon, 27 May 2019 22:04:33 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2019.05/brief-description-of-xaas-in-the-ai-era/</guid>
      <description>私が所属しているDeNA AIシステム部の部内勉強会でDockerとXaaS（ザース）の話をさせていただいたので資料を公開します。 XaaS（ザ</description>
    </item>
    
    <item>
      <title>「Container Build Meetup #02」に行ってきた #container_build</title>
      <link>https://mazgi.github.io/posts/2019.05/went-to-container-build-meetup-02/</link>
      <pubDate>Wed, 15 May 2019 17:13:58 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2019.05/went-to-container-build-meetup-02/</guid>
      <description>「Container Build Meetup」に参加してきました。 Container Build Meetup #2 - connpass タイムテーブル 分刻みですね。 なお開始時点で「予定のタイトルでしゃべる人は</description>
    </item>
    
    <item>
      <title>docker-composeでWebアプリ開発する環境をまとめた(Rails, Flask)</title>
      <link>https://mazgi.github.io/posts/2019.04/published-dev-environments-for-webapps-with-docker-compose/</link>
      <pubDate>Tue, 09 Apr 2019 19:26:15 +0000</pubDate>
      
      <guid>https://mazgi.github.io/posts/2019.04/published-dev-environments-for-webapps-with-docker-compose/</guid>
      <description>&lt;p&gt;最近、Macなどのローカルには極力rbenvなどをインストールせずにできる限りDockerコンテナ上に開発環境を作ろうとしています。&lt;br /&gt;
開発中は&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt;を使っているのですが、いろいろなリポジトリに似たような &lt;code&gt;docker-compose.yml&lt;/code&gt; が増えてきたのでテンプレート代わりにまとめました。&lt;br /&gt;
リポジトリはこちら。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mazgi-showcase/docker-compose.webapp-dev-envs/tree/2019.04.0&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Packerを使ってECRとGCRに同じDockerイメージをPushする</title>
      <link>https://mazgi.github.io/posts/2018.09/push-docker-image-to-ecr-and-gcr-with-packer/</link>
      <pubDate>Sun, 09 Sep 2018 05:15:46 +0900</pubDate>
      
      <guid>https://mazgi.github.io/posts/2018.09/push-docker-image-to-ecr-and-gcr-with-packer/</guid>
      <description>自分用のML環境としてDockerイメージを作っていたのだが、 FROM: nvidia/cuda:9.2-cudnn7-devel-ubuntu18.04 なのでDockerHubでpublicにするのも憚られ、ECR/GCRに置</description>
    </item>
    
  </channel>
</rss>